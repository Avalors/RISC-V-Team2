$version Generated by VerilatedVcd $end
$date Thu Nov 28 10:42:45 2024 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 { a0 [31:0] $end
  $var wire  1 y clk $end
  $var wire  1 z rst $end
  $scope module top $end
   $var wire  3 Q ALUctrl [2:0] $end
   $var wire 32 H ALUop1 [31:0] $end
   $var wire 32 I ALUop2 [31:0] $end
   $var wire 32 J ALUout [31:0] $end
   $var wire  1 N ALUsrc $end
   $var wire  1 K EQ $end
   $var wire 32 G ImmOp [31:0] $end
   $var wire  2 P ImmSrc [1:0] $end
   $var wire  5 E PC [4:0] $end
   $var wire  1 O PCsrc $end
   $var wire 32 L RD2 [31:0] $end
   $var wire  1 M RegWrite $end
   $var wire 32 J WD3 [31:0] $end
   $var wire 32 { a0 [31:0] $end
   $var wire  1 y clk $end
   $var wire 32 F instr [31:0] $end
   $var wire  1 z rst $end
   $scope module ALUOperandMux $end
    $var wire 32 | DATA_WIDTH [31:0] $end
    $var wire 32 L in0 [31:0] $end
    $var wire 32 G in1 [31:0] $end
    $var wire 32 I out [31:0] $end
    $var wire  1 N sel $end
   $upscope $end
   $scope module ArithmeticLogicUnit $end
    $var wire  3 Q ALUctrl [2:0] $end
    $var wire 32 H ALUop1 [31:0] $end
    $var wire 32 I ALUop2 [31:0] $end
    $var wire  1 K EQ $end
    $var wire 32 J Result [31:0] $end
   $upscope $end
   $scope module InstructionMemory $end
    $var wire 32 } ADDRESS_WIDTH [31:0] $end
    $var wire 32 | DATA_WIDTH [31:0] $end
    $var wire  5 E addr [4:0] $end
    $var wire 32 F instr [31:0] $end
    $var wire 32 # rom_array[0] [31:0] $end
    $var wire 32 - rom_array[10] [31:0] $end
    $var wire 32 . rom_array[11] [31:0] $end
    $var wire 32 / rom_array[12] [31:0] $end
    $var wire 32 0 rom_array[13] [31:0] $end
    $var wire 32 1 rom_array[14] [31:0] $end
    $var wire 32 2 rom_array[15] [31:0] $end
    $var wire 32 3 rom_array[16] [31:0] $end
    $var wire 32 4 rom_array[17] [31:0] $end
    $var wire 32 5 rom_array[18] [31:0] $end
    $var wire 32 6 rom_array[19] [31:0] $end
    $var wire 32 $ rom_array[1] [31:0] $end
    $var wire 32 7 rom_array[20] [31:0] $end
    $var wire 32 8 rom_array[21] [31:0] $end
    $var wire 32 9 rom_array[22] [31:0] $end
    $var wire 32 : rom_array[23] [31:0] $end
    $var wire 32 ; rom_array[24] [31:0] $end
    $var wire 32 < rom_array[25] [31:0] $end
    $var wire 32 = rom_array[26] [31:0] $end
    $var wire 32 > rom_array[27] [31:0] $end
    $var wire 32 ? rom_array[28] [31:0] $end
    $var wire 32 @ rom_array[29] [31:0] $end
    $var wire 32 % rom_array[2] [31:0] $end
    $var wire 32 A rom_array[30] [31:0] $end
    $var wire 32 B rom_array[31] [31:0] $end
    $var wire 32 & rom_array[3] [31:0] $end
    $var wire 32 ' rom_array[4] [31:0] $end
    $var wire 32 ( rom_array[5] [31:0] $end
    $var wire 32 ) rom_array[6] [31:0] $end
    $var wire 32 * rom_array[7] [31:0] $end
    $var wire 32 + rom_array[8] [31:0] $end
    $var wire 32 , rom_array[9] [31:0] $end
    $scope module unnamedblk1 $end
     $var wire 32 C i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module PC_Reg $end
    $var wire 32 G ImmOp [31:0] $end
    $var wire  5 E PC [4:0] $end
    $var wire  1 O PCsrc $end
    $var wire 32 } WIDTH [31:0] $end
    $var wire  1 y clk $end
    $var wire  1 z rst $end
   $upscope $end
   $scope module RegFile $end
    $var wire  5 R AD1 [4:0] $end
    $var wire  5 S AD2 [4:0] $end
    $var wire  5 T AD3 [4:0] $end
    $var wire 32 H RD1 [31:0] $end
    $var wire 32 L RD2 [31:0] $end
    $var wire 32 J WD3 [31:0] $end
    $var wire  1 M WE3 $end
    $var wire 32 { a0 [31:0] $end
    $var wire  1 y clk $end
    $var wire 32 U registers[0] [31:0] $end
    $var wire 32 _ registers[10] [31:0] $end
    $var wire 32 ` registers[11] [31:0] $end
    $var wire 32 a registers[12] [31:0] $end
    $var wire 32 b registers[13] [31:0] $end
    $var wire 32 c registers[14] [31:0] $end
    $var wire 32 d registers[15] [31:0] $end
    $var wire 32 e registers[16] [31:0] $end
    $var wire 32 f registers[17] [31:0] $end
    $var wire 32 g registers[18] [31:0] $end
    $var wire 32 h registers[19] [31:0] $end
    $var wire 32 V registers[1] [31:0] $end
    $var wire 32 i registers[20] [31:0] $end
    $var wire 32 j registers[21] [31:0] $end
    $var wire 32 k registers[22] [31:0] $end
    $var wire 32 l registers[23] [31:0] $end
    $var wire 32 m registers[24] [31:0] $end
    $var wire 32 n registers[25] [31:0] $end
    $var wire 32 o registers[26] [31:0] $end
    $var wire 32 p registers[27] [31:0] $end
    $var wire 32 q registers[28] [31:0] $end
    $var wire 32 r registers[29] [31:0] $end
    $var wire 32 W registers[2] [31:0] $end
    $var wire 32 s registers[30] [31:0] $end
    $var wire 32 t registers[31] [31:0] $end
    $var wire 32 X registers[3] [31:0] $end
    $var wire 32 Y registers[4] [31:0] $end
    $var wire 32 Z registers[5] [31:0] $end
    $var wire 32 [ registers[6] [31:0] $end
    $var wire 32 \ registers[7] [31:0] $end
    $var wire 32 ] registers[8] [31:0] $end
    $var wire 32 ^ registers[9] [31:0] $end
    $var wire  1 z rst $end
    $scope module unnamedblk1 $end
     $var wire 32 D i [31:0] $end
    $upscope $end
    $scope module unnamedblk2 $end
     $var wire 32 u i [31:0] $end
    $upscope $end
   $upscope $end
   $scope module SignExtender $end
    $var wire 32 | DATA_WIDTH [31:0] $end
    $var wire 32 G ImmOp [31:0] $end
    $var wire  2 P ImmSrc [1:0] $end
    $var wire 32 F instr [31:0] $end
   $upscope $end
   $scope module controlunit $end
    $var wire  3 Q ALUctrl [2:0] $end
    $var wire  1 N ALUsrc $end
    $var wire 32 | DATA_WIDTH [31:0] $end
    $var wire  1 K EQ $end
    $var wire  2 P ImmSrc [1:0] $end
    $var wire  1 O PCsrc $end
    $var wire  1 M RegWrite $end
    $var wire  3 w funct3 [2:0] $end
    $var wire  7 x funct7 [6:0] $end
    $var wire 32 F instr [31:0] $end
    $var wire  7 v op [6:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
0K
b00000000000000000000000000000000 L
0M
0N
0O
b00 P
b000 Q
b00000 R
b00000 S
b00000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
b00000000000000000000000000000000 f
b00000000000000000000000000000000 g
b00000000000000000000000000000000 h
b00000000000000000000000000000000 i
b00000000000000000000000000000000 j
b00000000000000000000000000000000 k
b00000000000000000000000000000000 l
b00000000000000000000000000000000 m
b00000000000000000000000000000000 n
b00000000000000000000000000000000 o
b00000000000000000000000000000000 p
b00000000000000000000000000000000 q
b00000000000000000000000000000000 r
b00000000000000000000000000000000 s
b00000000000000000000000000000000 t
b00000000000000000000000000000000 u
b0000000 v
b000 w
b0000000 x
1y
0z
b00000000000000000000000000000000 {
b00000000000000000000000000100000 |
b00000000000000000000000000000101 }
#1
b00001111111100000000001100010011 #
b00000000000000000000010100010011 $
b00000000000000000000010110010011 %
b00000000000001011000010100010011 &
b00000000000101011000010110010011 '
b11111110011001011001110011100011 (
b11111110000000110001100011100011 )
b00000000000000000000000000010011 *
b00000000000000000000000000010011 +
b00000000000000000000000000010011 ,
b00000000000000000000000000010011 -
b00000000000000000000000000010011 .
b00000000000000000000000000010011 /
b00000000000000000000000000010011 0
b00000000000000000000000000010011 1
b00000000000000000000000000010011 2
b00000000000000000000000000010011 3
b00000000000000000000000000010011 4
b00000000000000000000000000010011 5
b00000000000000000000000000010011 6
b00000000000000000000000000010011 7
b00000000000000000000000000010011 8
b00000000000000000000000000010011 9
b00000000000000000000000000010011 :
b00000000000000000000000000010011 ;
b00000000000000000000000000010011 <
b00000000000000000000000000010011 =
b00000000000000000000000000010011 >
b00000000000000000000000000010011 ?
b00000000000000000000000000010011 @
b00000000000000000000000000010011 A
b00000000000000000000000000010011 B
b00000000000000000000000000100000 C
b00000000000000000000000000100000 D
b00001111111100000000001100010011 F
b00000000000000000000000011111111 G
b00000000000000000000000011111111 I
b00000000000000000000000011111111 J
1M
1N
b11111 S
b00110 T
b0010011 v
b0000111 x
0y
